#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socket(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* ルームID管理用配列 key : socket.id */
var roomInfo = [];

io.on('connection', (socket) => {
 
  socket.on('message', (message) => {

    for(const [index, item] of roomInfo.entries() ) {

      if( item.socketID == socket.id ) {
        
        console.log('message', item, index );

        /* シグナリング処理 */
        socket.broadcast.to( item.room ).emit('message', message );

        break;
      }
    }
  });

  socket.on('init', (roomID, user_name ) => {

    /* ユーザ毎にルームIDを管理する */
    roomInfo.push( { socketID: socket.id, room:roomID, name:user_name } );

    /* roomに参加する */
    socket.join(roomID);

    /* roomメンバーに入室通知をする */
    socket.broadcast.to(roomID).emit('req_join_room', user_name + 'さんが入室しました');
  });
  
  socket.on('disconnect', () => {

    for(const [index, item] of roomInfo.entries() ) {

      if( item.socketID == socket.id ) {

        console.log('disconnect', item, index );

        /* roomから抜く*/
        socket.leave( item.room );

        /* roomメンバーに退室通知をする */
        socket.broadcast.to( item.room ).emit('req_leave_room', item.name + 'さんが退室しました');

        roomInfo.splice( index, 1 );

        break;
      }
    }
  });

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
